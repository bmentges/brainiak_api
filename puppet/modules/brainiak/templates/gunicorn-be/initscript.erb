#!/bin/bash
#
# Gunicorn 'Green Unicorn' is a Python WSGI HTTP Server for UNIX.
#
# chkconfig:    2345 85 15
# description:  <%=servico%>
# pidfile:      <%=pid_file%>
#
##############################################################################
# ARQUIVO GERENCIADO PELO PUPPET                                             #
# AS ALTERACOES MANUAIS SERAO DESCARTADAS NA PROXIMA ATUALIZACAO DO PUPPET   #
<%
=begin -%>

Este código abaixo gera erro quando rodado localmente:

warning: Dynamic lookup of $git_projeto at /opt/mamulengo/setup/modules/gunicorn/templates/gunicorn-init.erb:17 is deprecated.  Support will be removed in Puppet 2.8.  Use a fully-qualified variable name (e.g., $classname::variable) or parameterized classes.

<% if has_variable?("git_projeto") then %># Git do Projeto que usou esse template: <%=git_projeto%><% end %>

<%
=end -%>
##############################################################################

source /opt/etc/scripts/initfunctions.sh

user="<%=instancia_usuario%>"
command="<%=python_prefix%>/bin/gunicorn"
check="<%=python_prefix%>/bin/python"
config="<%=config_file%>"
app_dir="<%=app_dir%>"
settings="<%=settings_file%>"
title="<%=servico%>"
pidfile="<%=pid_file%>"
logfile="<%=log_file%>"

startcmd="$command -c $config <%= gunicorn_cmd_parameters %>"

PreFlight()
{
<% if has_variable?('dbpasswd_conf_file') then -%>
    LoadProtectedEnviron --uid=10000 <%= dbpasswd_conf_file %>

<% end -%>
    if [[ ! -d "${app_dir}" ]] ; then
        echo -n "Não consigo achar diretório '${app_dir}'"
        failure
        exit 1
    fi

    cd "${app_dir}"

    if false ; then  # Desabilitado, até checar a compatibilidade com outros projetos
      if [[ ! -f "${app_dir}/${settings//.//}.py" ]] ; then
        echo -n "Não consigo achar arquivo '${app_dir}/${settings//.//}.py'"
        failure
        exit 1
      fi
    fi

    export DJANGO_SETTINGS_MODULE="${settings}"
    export PYTHONPATH="${app_dir}${PYTHONPATH:+:${PYTHONPATH}}"
    export INSTANCIA="<%=instancia%>"
}

start ()
{
    PreFlight
    InfraStartDaemon --title="$title" --user=$user --wait --pidfile="$pidfile" --check="$check" "$startcmd"
}

stop()
{
    InfraKillDaemon --title="$title" --pidfile="$pidfile" --check="$check" --killsig=QUIT --pgid
}

reload()
{
    InfraReloadDaemon --title="$title" --pidfile="$pidfile" --check="$check"
}

status()
{
    InfraStatusDaemon --title="$title" --pidfile="$pidfile" --check="$check"
}

checkconfig()
{
    PreFlight
    echo -n "Testing $title: "
    if output=$(InfraStartDaemon --title="$title" --user=$user "$startcmd --check-config 2>&1")
     then
        success
        return 0
    else
        failure
        echo -e "Error:\n$output"
        return 1
    fi
}

case "$1" in
    start)
        start
        ;;
    force_stop|stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        stop && start
        ;;
    checkconfig)
        checkconfig
        ;;
    graceful|reload)
        reload
        ;;
    *)
        echo "Uso: ${0#./} {start|stop|status|reload|restart|checkconfig}"
        exit 1
        ;;
esac

# vim:syntax=sh:ts=4
# EOF
